<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on </title>
    <link>/blog/</link>
    <description>Recent content in Blogs on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to use svg icons in Django templates?</title>
      <link>/blog/svg-icons-django-template/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/svg-icons-django-template/</guid>
      <description>&lt;p&gt;Normally we use icon fonts in our projects, which are created with
&lt;a href=&#34;https://rsp.github.io/fontcustom/&#34;&gt;Fontcustom&lt;/a&gt;. It is a nice tool to
generate the font icon from our own svg icons. Using the icon font in the last 3
years I always bump into some styling issues. The icon font has anti-alias and
doesn&amp;rsquo;t get as sharp as vector images. The most annoying thing is positioning
the icon next another element or text. You have to take into account the vertical
alignment, line-height, letter-spacing etc, after all, it is a font. To position
it correctly in the latest browsers, you have to do a lot of tweaking.&lt;/p&gt;

&lt;p&gt;I was curious if you can use inline svg icons in an maintainable way. After
reading the article on
&lt;a href=&#34;https://css-tricks.com/svg-symbol-good-choice-icons/&#34;&gt;CSS-tricks&lt;/a&gt;
about svg symbols and Sara Soueidans&amp;rsquo; article about
&lt;a href=&#34;https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/&#34;&gt;
svg sprites&lt;/a&gt;, I created a little demo page using this technique and discussed
it with my colleagues to give this technique a chance in one of our projects.
Because of the great advantages of svg, the decision was easily made.&lt;/p&gt;

&lt;p&gt;The project we started to use svg symbols is build with Django Framework.
The svgs icons are created separately and placed in a folder
called &lt;em&gt;svg-icons&lt;/em&gt;. This folder is purely for version control.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;templates&lt;/em&gt; directory I created the include template file &lt;em&gt;include_svg_icon_sprite.html&lt;/em&gt;.
It is a html file because at the time of writing we still need to support IE and IE does
not support xlink to an svg file. I include this file in the base template at
the bottom of te page. Using &amp;ldquo;include&amp;rdquo; in the file name we know it is a
template snippet. In this file I have one svg file which contains all the symbols.
The symbol contains the svg code copied from each svg icon from the &lt;em&gt;svg-icons&lt;/em&gt;
directory.&lt;/p&gt;

&lt;pre rel=&#34;SVG&#34;&gt;
&lt;code class=&#34;html&#34;&gt;
&amp;lt;&lt;span class=&#34;tag&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;xmlns&lt;/span&gt;=&#34;http://www.w3.org/2000/svg&#34;
        &lt;span class=&#34;attribute&#34;&gt;xmlns:xlink&lt;/span&gt;=&#34;http://www.w3.org/1999/xlink&#34; &lt;span class=&#34;attribute&#34;&gt;class&lt;/span&gt;=&#34;svg-sprite&#34;
        &lt;span class=&#34;attribute&#34;&gt;viewBox&lt;/span&gt;=&#34;0 0 512 512&#34; &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;=&#34;512px&#34; &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;=&#34;512px&#34;&amp;gt;
    &amp;lt;&lt;span class=&#34;tag&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;id&lt;/span&gt;=&#34;filter&#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class=&#34;tag&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;d&lt;/span&gt;=&#34;M0 26h512v51.206L307.21 333.213v153.6l-102.404-51.208V333.213L0 77.206V26z&#34; /&amp;gt;
    &amp;lt;/&lt;span class=&#34;tag&#34;&gt;symbol&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&#34;tag&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;id&lt;/span&gt;=&#34;home&#34;&amp;gt;
        &amp;lt;&lt;span class=&#34;tag&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;d&lt;/span&gt;=&#34;M512 296l-96-96V56h-64v80l-96-96L0 296v16h64v160h160v-96h64v96h160V312h64v-16z&#34; /&amp;gt;
    &amp;lt;/&lt;span class=&#34;tag&#34;&gt;symbol&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&#34;tag&#34;&gt;svg&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use a symbol you could place the following code in the template every time you
need an icon:
&lt;pre rel=&#34;html&#34;&gt;
&lt;code class=&#34;html&#34;&gt;
&amp;lt;&lt;span class=&#34;tag&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;viewBox&lt;/span&gt;=&amp;ldquo;0 0 512 512&amp;rdquo; &lt;span class=&#34;attribute&#34;&gt;class&lt;/span&gt;=&amp;ldquo;icon-home&amp;rdquo;&amp;gt;
    &amp;lt;&lt;span class=&#34;tag&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;attribute&#34;&gt;xlink:href&lt;/span&gt;=&amp;ldquo;#home&amp;rdquo;&amp;gt;&amp;lt;/&lt;span class=&#34;tag&#34;&gt;use&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&#34;tag&#34;&gt;svg&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;It is still a lot of typing, to make it easier I created a template tag called
icon.py. In the djangoproject documentation you can find more information about &lt;a href=&#34;https://docs.djangoproject.com/en/1.10/howto/custom-template-tags/#writing-custom-template-tags&#34;&gt;custom template tags&lt;/a&gt;.&lt;/p&gt;

&lt;pre rel=&#34;Python&#34;&gt;
&lt;code class=&#34;python&#34;&gt;
&lt;span class=&#34;def&#34;&gt;from&lt;/span&gt; django &lt;span class=&#34;def&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;import&#34;&gt;template&lt;/span&gt;
&lt;span class=&#34;def&#34;&gt;from&lt;/span&gt; django.utils.safestring &lt;span class=&#34;def&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;import&#34;&gt;mark_safe&lt;/span&gt;
&lt;span class=&#34;def&#34;&gt;from&lt;/span&gt; django.utils.html &lt;span class=&#34;def&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;import&#34;&gt;format_html&lt;/span&gt;

&lt;span class=&#34;attribute&#34;&gt;register&lt;/span&gt; = &lt;span class=&#34;import&#34;&gt;template&lt;/span&gt;.Library()


&lt;span class=&#34;def&#34;&gt;@register.simple_tag(name=&#39;svg_icon&#39;)&lt;/span&gt;
&lt;span class=&#34;def&#34;&gt;def svg_icon(icon_name, extra_class=&#39;&#39;)&lt;/span&gt;:
    &lt;span class=&#34;attribute&#34;&gt;svg_tag&lt;/span&gt; = &lt;span class=&#34;import&#34;&gt;format_html&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;&amp;lt;svg viewBox=&#34;0 0 512 512&#34; class=&#34;icon-{name} {extra}&#34;&amp;gt;&#39;
               &#39;&amp;lt;use xlink:href=&#34;#{name}&#34; class=&#34;sym-{name}&#34;&amp;gt;&amp;lt;/use&amp;gt;&#39;
               &#39;&amp;lt;/svg&amp;gt;&#39;&lt;/span&gt;, name=&lt;span class=&#34;attribute&#34;&gt;icon_name&lt;/span&gt;, extra=&lt;span class=&#34;attribute&#34;&gt;extra_class&lt;/span&gt;)

    &lt;span class=&#34;statement&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;import&#34;&gt;mark_safe&lt;/span&gt;(&lt;span class=&#34;attribute&#34;&gt;svg_tag&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use the icon in your template you only have to load the template tag and then you
can use the created tag everywhere in you template:&lt;/p&gt;

&lt;pre rel=&#34;Django HTML&#34;&gt;
&lt;code class=&#34;django&#34;&gt;
{% load icon %}
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;{% url &#34;home&#34; %}&#34; class=&#34;menu-item&#34;&amp;gt;
            {% svg_icon &#34;home&#34; %} Home
        &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;{% url &#34;filter&#34; %}&#34; class=&#34;menu-item&#34;&amp;gt;
            {% svg_icon &#34;filter&#34; %} Filter
        &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title> A vanilla js and css tooltip</title>
      <link>/blog/css-js-tooltip/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/css-js-tooltip/</guid>
      <description>&lt;p&gt;In february 2016 I was looking for a tooltip plugin which must fix 2 design
issues: overflow:hidden and the window corners. I also don&amp;rsquo;t want to need jQuery.
During searching and testing a couple plugins, I thought, why not build one myself?
It is a fun way to learn more about javascript and css animations.&lt;/p&gt;

&lt;p&gt;In the same month I was also reading the book: &lt;em&gt;this &amp;amp; Object prototypes&lt;/em&gt;, from
the series &lt;em&gt;You don&amp;rsquo;t know javascript&lt;/em&gt;. With this book I learned how to create
objects and used this technique for the tooltip.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;tooltip.create:&lt;/h2&gt;
The javascript searches for the &lt;em&gt;tooltip-container&lt;/em&gt; element.
This container is an empty element where the tooltip text will be injected.&lt;/p&gt;

&lt;p&gt;Based on the position of the tooltip item in the viewport, the class names:
&lt;em&gt;tooltip-left, tooltip-right&lt;/em&gt; or &lt;em&gt;tooltip-center&lt;/em&gt; are set on the tooltip-container.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;tooltip.position:&lt;/h2&gt;
The tooltip container gets positioned on the left, right or center bottom side
of the tooltip item. I calculate its position using &lt;em&gt;getBoundingClientRect()&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;If the tooltip item is positioned near the edges of left or right side of the viewport
the tooltip, will appear on the right or left side of the tooltip item. In
other cases the tooltip appears right below the tooltip item.&lt;/p&gt;

&lt;pre rel=&#34;Javascript&#34;&gt;
&lt;code class=&#34;javascript&#34;&gt;
var Tooltip =  {
    create: function(tooltip, elm) {
        elm_edges = elm.getBoundingClientRect(); // relative to the viewport
        tooltip_text = document.createTextNode(elm.getAttribute(&#39;data-tooltip&#39;));
        tooltip.appendChild(tooltip_text);

        // Remove no-display + set the correct classname based on the position
        // of the elm.
        if (elm_edges.left &gt; (window.innerWidth - 100)) {
            tooltip.className =&#39;tooltip-container tooltip-left&#39;;
        } else if ((elm_edges.left + (elm_edges.width / 2)) &lt; 100) {
            tooltip.className = &#39;tooltip-container tooltip-right&#39;;
        } else {
            tooltip.className = &#39;tooltip-container tooltip-center&#39;;
        }
    },
    position: function(tooltip, elm) {
        var elm_top = elm_edges.top + elm_edges.height + 10; // 10 = arrow height

        // position tooltip on the left side of the elm.
        // 220 = the max width + arrow width of the tooltip.
        if (elm_edges.left &gt; (window.innerWidth - 100)) {
            tooltip.style.left = (elm_edges.left - 220) + &#39;px&#39;;
            tooltip.style.top = elm.offsetTop + &#39;px&#39;;
        } else if ((elm_edges.left + (elm_edges.width / 2)) &lt; 100) {
            // position tooltip on the right side of the elm.
            tooltip.style.left = (elm_edges.left + elm_edges.width + 20) + &#39;px&#39;;
            tooltip.style.top = elm.offsetTop + &#39;px&#39;;
        } else {
            // Position the toolbox in the center of the elm.
            var centered = (elm_edges.left + (elm_edges.width / 2)) - (tooltip.offsetWidth / 2);
            tooltip.style.left = centered + &#39;px&#39;;
            tooltip.style.top = elm_top + &#39;px&#39;;
        }
    },
};
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;With the functions &lt;em&gt;showTooltip&lt;/em&gt; and &lt;em&gt;hideTooltip&lt;/em&gt; the tooltip is visible or
hidden, using the EventListeners &lt;em&gt;mouseover&lt;/em&gt; and &lt;em&gt;mouseout&lt;/em&gt;.&lt;/p&gt;

&lt;pre rel=&#34;Javascript&#34;&gt;
&lt;code class=&#34;Javascript&#34;&gt;
function showTooltip(evt) {
    var item = Object.create(Tooltip);
    item.create(tooltip, evt.currentTarget);
    item.position(tooltip, evt.currentTarget);
}

function hideTooltip() {
    tooltip.className = &#39;tooltip-container no-display&#39;;
    tooltip.removeChild(tooltip.firstChild);
    tooltip.removeAttribute(&#39;style&#39;);
}

function onReady() {
    tooltip = document.documentElement.querySelector(&#39;.tooltip-container&#39;);
    var tooltip_elms = document.documentElement.querySelectorAll(&#39;[data-tooltip]&#39;);

    Array.prototype.forEach.call(tooltip_elms, function(elm) {
        elm.addEventListener(&#39;mouseover&#39;,  showTooltip , false);
        elm.addEventListener(&#39;mouseout&#39;, hideTooltip, false);
    });
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The CSS handles the tooltip animation using animation keyframes.
The class names &lt;em&gt;tooltip-left, tooltip-right&lt;/em&gt; and &lt;em&gt;tooltip-center&lt;/em&gt; positions the
tooltip arrow.&lt;/p&gt;

&lt;pre rel=&#34;SCSS&#34;&gt;
&lt;code class=&#34;scss&#34;&gt;
.tooltip-container {
    @include transform(translateZ(0)); // GPU
    position: absolute;
    max-width: 200px;
    padding: 8px 10px 10px;
    font-size: 1.6rem;
    background-color: #2d2d2d;
    color: #fff;
    border-radius: 4px;
    opacity: 1; // scale animation setting

    &amp;[class*=&#34; tooltip-&#34;] {
        @include animation(tooltip-anim 0.8s);
    }

    &amp;::after {
        position: absolute;
        display: block;
        content: &#34;&#34;;
    }

    // position arrow on the right of the tooltip
    &amp;.tooltip-left::after {
        @include transform(translateY(-50%));
        right: -8px;
        top: 50%;
        border: {
            style: solid;
            width: 6px 0 6px 8px;
            color: transparent transparent transparent #2d2d2d;
        }
    }

    // position arrow on the left of the tooltip
    &amp;.tooltip-right::after {
        @include transform(translateY(-50%));
        left: -8px;
        top: 50%;
        border: {
            style: solid;
            width: 6px 8px 6px 0;
            color: transparent #2d2d2d transparent transparent;
        }
    }

    // position arrow in the top center of the tooltip
    &amp;.tooltip-center::after {
        @include transform(translateX(-50%));
        top: -8px;
        left: 50%;
        border: {
            style: solid;
            width: 0 6px 8px 6px;
            color: transparent transparent #2d2d2d transparent;
        }
    }
}

[data-tooltip] {
    cursor: pointer;
    color: #7cb342;
    display: inline-block;
}

@include keyframes(tooltip-anim) {
    0% {
        @include transform(matrix(0.5, 0, 0, 0.8, 0, 0));
        opacity: 0;
    }

    20% { @include transform(matrix(1.1, 0, 0, 1.1, 0, 0)); }
    40% { opacity: 1; }
    70% { @include transform(matrix(1, 0, 0, 1, 0, 0)); }
    100% { @include transform(matrix(1, 0, 0, 1, 0, 0)); }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;As you can see, not much code is written to get the tooltip to work. The complete
code can be found on my &lt;a href=&#34;https://github.com/mirelvt/js-css-tooltip&#34;&gt;github page&lt;/a&gt;
and I also created a simple &lt;a href=&#34;http://www.mirellavanteulingen.nl/demos/tooltip/&#34;&gt;demo page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Font icons with Fontcustom and SASS</title>
      <link>/blog/sass_fontcustom/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/sass_fontcustom/</guid>
      <description>&lt;p&gt;In 2013 and 2014 I used &lt;a href=&#34;http://www.icomoon.io&#34;&gt;Icomoon&lt;/a&gt; to create font icons.
It is a nice library and tool. You can choose icons from their library and
they have the feature to upload your own svgs to create the font icon set. It is a great tool if you only need to generate the font icon once. But not when you have to add new ones to the set.
&lt;p&gt;
    At Dreamsolution the company where I&amp;rsquo;m employed, the development and design goes in iterations.
    When the first design is approved I can create with Icomoon the font icon set at once.
    But as the development and design iterations continues, new icons are created.
    When using Icomoon I have to go through several steps to update my font icon set:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Uploading the json file in icomoon. We keep the generated selection.json file in our VCS &lt;a href=&#34;https://mercurial.selenic.com&#34;&gt;Mercurial&lt;/a&gt;.
        &lt;li&gt;Add the new icons to the selection.&lt;/li&gt;
        &lt;li&gt;Generate the font.&lt;/li&gt;
        &lt;li&gt;Replace the old font icon files with the new ones.&lt;/li&gt;
        &lt;li&gt;Update your scss file.&lt;/li&gt;
        &lt;li&gt;Compile scss file to css.&lt;/li&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    That is quite a few steps I have to go through, to update my font icon set. So how can this workflow
    be more efficient? 3 Months ago I read somewhere about &lt;a href=&#34;https://rsp.github.io/fontcustom/&#34;&gt;Fontcustom&lt;/a&gt;,
    not sure if it was an article in &lt;a href=&#34;http://css-weekly.com&#34;&gt;cssweekly&lt;/a&gt; or the &lt;a href=&#34;http://www.webdesignermagazine.nl&#34;&gt;Webdesigner Magazine&lt;/a&gt; (Dutch version),
    but it caught my attention. Fontcustom is a command line tool to generate the font icon, based on
    a selection of svg files. It generates the css + preview html on the fly.
    And with Fontcustom I am able to speed up my workflow when new icons are to be implemented.
&lt;/p&gt;
&lt;h2&gt;How to set up Fontcustom to speed up my workflow&lt;/h2&gt;
&lt;p&gt;In my daily work I use SASS, and Fontcustom has the feature to generate .scss file. This is very neat, but the generated .scss file is similar to the generated css file: it defines for each icon an icon class, and when you have, let&amp;rsquo;s say 30 icons, it&amp;rsquo;s get cluttered.&lt;/p&gt;&lt;/p&gt;

&lt;pre rel=&#34;SCSS&#34;&gt;
&lt;code class=&#34;scss&#34;&gt;
.icon-arrow-down::before {
    content: &#34;&#34;;
}
.icon-arrow-left::before {
    content: &#34;&#34;;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
    I wanted to use the SASS maps feature to get a nice list of all the icons and use an @each loop to generate the classes. How do I get Fontcustom generate the output I want? First you need to have your project structure ready and &lt;a href=&#34;http://fontcustom.com&#34;&gt;Fontcustom&lt;/a&gt; installed. My project structure looks like this:
&lt;/p&gt;
&lt;pre rel=&#34;Folder structure&#34;&gt;
&lt;code class=&#34;dts&#34;&gt;FOO-project/
static/
  foo-icons/
     fontcustom.yml
     _icons.scss /* Is the template which will create the _icons.scss partial file \*/
     foo-icons-preview.html /* This file is generated by fontcustom \*/
     svg/
        checkmark.svg
        arrow-right.svg
        arrow-left.svg
        trash.svg
   fonts/
   scss/
      base.scss
      _fonts.scss
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Fontcustom.yml&lt;/h2&gt;
&lt;p&gt;
    The two main files which will do the work are &lt;strong&gt;fontcustom.yml&lt;/strong&gt; config file and the
    &lt;b&gt;_icons.scss&lt;/b&gt; fontcustom template file. There are a lot of configuration options,
    but in this example I highlight the ones which are important for this example. Personally I run the fontcustom command from the root of the project directory, that&#39;s why I use the complete path in the config file. Now let&#39;s take a look at my fontcustom.yml file:
&lt;/p&gt;
&lt;pre rel=&#34;YAML&#34;&gt;
&lt;code class=&#34;yaml&#34;&gt;
# =============================================
# Font Custom Configuration, for more info,
# visit https://github.com/FontCustom/fontcustom.
# ===============================================
font_name: foo-icons

# Generate fonts without asset-busting hashes.
no_hash: true

# Forces compilation, even if inputs have not changed
force: false

input:
  vectors: FOO-project/static/foo-icons/svg
  templates: FOO-project/static/foo-icons

output:
  fonts: FOO-project/static/fonts
  preview: FOO-project/static/foo-icons
  _icons.scss: FOO-project/static/scss

templates: [_icons.scss, preview]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;SCSS fontcustom template&lt;/h2&gt;
&lt;p&gt;
    The configuration file is ready, now I have to create the
    _icons.scss template which will output the desired scss partial :
&lt;/p&gt;
&lt;pre rel=&#34;Fontcustom SCSS template&#34;&gt;
&lt;code&gt;
// This will generate the @font-face
&amp;lt;%= font_face(path: &#34;fonts/&#34; + font_name) %&amp;gt;

// This generates the SASS map:
$font-icons: (&amp;lt;% @glyphs.each do |name, value| %&amp;gt;
&#34;&amp;lt;%= name.to_s %&amp;gt;&#34;: &#34;\&amp;lt;%= value[:codepoint].to_s(16) %&amp;gt;&#34;,&amp;lt;% end %&amp;gt;
);

@each $icon, $unicode in $font-icons {
    .icon-#{$icon}::before {
        content: $unicode;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;Generate the font icon and _icons.scss partial&lt;/h2&gt;
&lt;p&gt;
Everything is in place and I can run the fontcustom command from the root of the directory to generate the font icon set and scss partial.
&lt;/p&gt;
&lt;pre rel=&#34;Terminal&#34;&gt;
&lt;code class=&#34;dos&#34;&gt;
$ fontcustom compile -c static/foo-icons/fontcustom.yml
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The project structure is updated with the font icon and scss partial:&lt;/p&gt;
&lt;pre rel=&#34;Folder structure&#34;&gt;
&lt;code class=&#34;dts&#34;&gt;
FOO-project/
static/
  foo-icons/
     fontcustom.yml
     _icons.scss /* Is the template which will create the _icons.scss partial file */
     foo-icons-preview.html /* This file is generated by fontcustom */
     svg/
        checkmark.svg
        arrow-right.svg
        arrow-left.svg
        trash.svg
   fonts/
      foo-icons.eot
      foo-icons.svg
      foo-icons.ttf
      foo-icons.woff
   scss/
      base.scss
      _fonts.scss
      _icons.scss /* generated icons partial */
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the generated _.icons.scss file. It contains the structure and info I wanted: @font-face declaration, the SASS map and the @each loop:&lt;/p&gt;

&lt;pre rel=&#34;SCSS&#34;&gt;
&lt;code&gt;
@font-face {
    font-family: &#34;foo-icons&#34;;
        src: url(&#34;fonts/foo-icons.eot&#34;);
        src: url(&#34;fonts/foo-icons.eot?#iefix&#34;) format(&#34;embedded-opentype&#34;),
            url(&#34;fonts/foo-icons.woff&#34;) format(&#34;woff&#34;),
            url(&#34;fonts/foo-icons.ttf&#34;) format(&#34;truetype&#34;),
            url(&#34;fonts/foo-icons.svg#foo-icons&#34;) format(&#34;svg&#34;);
    font-weight: normal;
    font-style: normal;
}

@media screen and (-webkit-min-device-pixel-ratio:0) {
      @font-face {
          font-family: &#34;foo-icons&#34;;
          src: url(&#34;fonts/foo-icons.svg#foo-icons&#34;) format(&#34;svg&#34;);
      }
  }

  &lt;span class=&#34;variable&#34;&gt;$font-icons: (
      &#34;arrow-down&#34;: &#34;\f100&#34;,
      &#34;arrow-left&#34;: &#34;\f101&#34;,
      &#34;arrow-right&#34;: &#34;\f102&#34;,
      &#34;arrow-up&#34;: &#34;\f103&#34;,
      &#34;calendar&#34;: &#34;\f104&#34;,
      &#34;checkmark&#34;: &#34;\f10f&#34;,
      &#34;close&#34;: &#34;\f111&#34;,
      &#34;edit&#34;: &#34;\f110&#34;,
      &#34;graph&#34;: &#34;\f105&#34;,
      &#34;help&#34;: &#34;\f112&#34;,
      &#34;lock-closed&#34;: &#34;\f106&#34;,
      &#34;lock-open&#34;: &#34;\f107&#34;,
      &#34;plus&#34;: &#34;\f108&#34;,
      &#34;projects&#34;: &#34;\f113&#34;,
      &#34;search&#34;: &#34;\f109&#34;,
      &#34;tag&#34;: &#34;\f10a&#34;,
      &#34;tags&#34;: &#34;\f10b&#34;,
      &#34;trash&#34;: &#34;\f10c&#34;,
      &#34;user&#34;: &#34;\f10d&#34;,
      &#34;users&#34;: &#34;\f10e&#34;,
  );

@each $icon, $unicode in $font-icons {
    .icon-#{$icon}:before {
        content: $unicode;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;Final steps&lt;/h2&gt;
&lt;p&gt;The final step is to make sure that every class that starts with or contains &lt;strong&gt;&amp;ldquo;icon-&amp;rdquo;&lt;/strong&gt; will use the &lt;strong&gt;foo-icons&lt;/strong&gt; font and that _icons.scss is included. I added the following code to my _fonts.scss:
&lt;/p&gt;&lt;/p&gt;

&lt;pre rel=&#34;_fonts.scss&#34;&gt;
&lt;code&gt;
@import &#34;_icons&#34;;

[class*=&#34; icon-&#34;]::before {
    display: inline-block;
    font-family: &#34;foo-icons&#34;;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1px;
    vertical-align: top;
    padding-top: 7px;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;My configuration is in place and when I have new icons to add, I just have to add the new icons to my svg directory and run the fontcustom command and scss command. The 6 slow steps are reduced to 3 faster steps.&lt;/p&gt;

&lt;p&gt;I hope this article is meaningful to you and if you have any questions or remarks you can find me on twitter @mirelvt or you can email me &lt;a href=&#34;mailto:mailenm@mirellavanteulingen.nl&#34;&gt;mailenm@mirellavanteulingen.nl&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create clickable rating stars with only SASS and HTML</title>
      <link>/blog/rating_stars_sass/</link>
      <pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/rating_stars_sass/</guid>
      <description>&lt;p&gt;In May, Roy Tomeij wrote the article &lt;a href=&#34;http://advancedsass.com/articles/configurable-star-rating-without-js.html&#34;&gt;&amp;ldquo;Configurable star rating without JS&amp;rdquo;&lt;/a&gt;. I was thinking how to do this using a font icon instead of a background image and make the stars clickable. I believe it would take less code to write, and it is. I had the code finished a couple of days later in May, but now I&amp;rsquo;ve finally have the time to post my solution. So here we go:
&lt;h3&gt;HTML structure&lt;/h3&gt;
&lt;p&gt;
I place the radio buttons in reversed order in the DOM to be able to do the hover + checked state in the right order with SASS. For the star I created a font icon using &lt;a href=&#34;http://www.fontcustom.com&#34;&gt;Fontcustom&lt;/a&gt; and &lt;a href=&#34;http://www.bohemiancoding.com/sketch/&#34;&gt;Sketch&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;I also add a &amp;ldquo;remove rating&amp;rdquo; option to be able to reset the rating.&lt;/p&gt;&lt;/p&gt;

&lt;pre rel=&#34;HTML&#34;&gt;
&lt;code&gt;&amp;lt;div class=&#34;remove-rating-wrapper&#34;&amp;gt;
    &amp;lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;remove-rating&#34;&amp;gt;
    &amp;lt;label for=&#34;remove-rating&#34;&amp;gt;Remove rating&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;rating&#34;&amp;gt;
    &amp;lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-4&#34;&amp;gt;
    &amp;lt;label for=&#34;star-4&#34; class=&#34;icon-star&#34;&amp;gt;&amp;lt;/label&amp;gt;
    &amp;lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-3&#34;&amp;gt;
    &amp;lt;label for=&#34;star-3&#34; class=&#34;icon-star&#34;&amp;gt;&amp;lt;/label&amp;gt;
    &amp;lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-2&#34;&amp;gt;
    &amp;lt;label for=&#34;star-2&#34; class=&#34;icon-star&#34;&amp;gt;&amp;lt;/label&amp;gt;
    &amp;lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-1&#34;&amp;gt;
    &amp;lt;label for=&#34;star-1&#34; name=&#34;4 stars&#34; class=&#34;icon-star&#34;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
First I hide the radio boxes using a negative margin. On the labels I add the class &#34;icon-star&#34;, which triggers the icon font. Then I create a SASS map for the number of stars I want to show.
&lt;/p&gt;

&lt;pre rel=&#34;SCSS&#34;&gt;
&lt;code&gt;
$stars-list: (
    1,
    2,
    3,
    4
);

.rating {
    position: relative;
    overflow: hidden;
    height: 32px;
    @include rating-stars($stars-list, 32px, orange, #f5d76d, 85);

    // Hide the radio buttons
    [type=&#34;radio&#34;] { margin-left: -19px; }

    label { cursor: pointer; }
    .icon-star { font-size&lt;/span&gt;: 3rem; }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
The rating stars mixin is where it all happens, it contains 4 arguments:
&lt;ol&gt;
&lt;li&gt;Number of stars&lt;/li&gt;
&lt;li&gt;star width&lt;/li&gt;
&lt;li&gt;hover color&lt;/li&gt;
&lt;li&gt;selected color&lt;/li&gt;
&lt;/ol&gt;
The labels are positioned absolute and using a SASS loop, the stars can be positioned in the right order. Within the loop I use the sibling selector ~ to handle the hover and the selected state of the stars properly.
&lt;/p&gt;

&lt;pre rel=&#34;SCSS&#34;&gt;
&lt;code&gt;
// Set hover + selected label for star rating&lt;/span&gt;
@mixin rating-stars($stars, $star-width, $c-hover, $c-selected) {
    &gt; label {
        position: absolute;
        top: 4px;

        &amp;:hover { color: $hover; }
    }

    // Loop through the stars to position them in the right order,
    and set the hover + checked color
    @for $i from 1 through length($stars) {

        // position the stars in reversed order
        &gt; label:nth-of-type(n + #{$i}) {
           left: ($star-width * length($stars)) - ($star-width * $i);
        }

        // Handle the hover
        &gt; label:nth-of-type(n + #{$i}):hover ~ label { color: $hover; }

        // Set selected color on all label siblings based on the checked radio
        &gt; input[type=&#34;radio&#34;]:nth-of-type(n + #{$i}):checked ~ label {
            color: $selected;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;And here a demo, as you can see it is not much code and it works in all latest browsers. I hope the article is meaningful to you.&lt;/p&gt;
&lt;div class=&#34;remove-rating-wrapper&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;remove-rating&#34;&gt;
&lt;label for=&#34;remove-rating&#34;&gt;Remove rating&lt;/label&gt;
&lt;/div&gt;
&lt;div class=&#34;rating&#34;&gt;
&lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-4&#34;&gt;
&lt;label for=&#34;star-4&#34; class=&#34;icon-star&#34;&gt;&lt;/label&gt;
&lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-3&#34;&gt;
&lt;label for=&#34;star-3&#34; class=&#34;icon-star&#34;&gt;&lt;/label&gt;
&lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-2&#34;&gt;
&lt;label for=&#34;star-2&#34; class=&#34;icon-star&#34;&gt;&lt;/label&gt;
&lt;input type=&#34;radio&#34; name=&#34;4 stars&#34; id=&#34;star-1&#34;&gt;
&lt;label for=&#34;star-1&#34; name=&#34;4 stars&#34; class=&#34;icon-star&#34;&gt;&lt;/label&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django form customization using Crispy Forms</title>
      <link>/blog/customize_form_crispy_forms/</link>
      <pubDate>Sun, 21 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/customize_form_crispy_forms/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;http://www.dreamsolution.nl&#34;&gt;Dreamsolution&lt;/a&gt; we regularly use Crispy Forms to generate
    complex forms in Django. I want to share some practical customization examples
    with Crispy Forms using the formhelper API. The examples are how to:
  &lt;ul&gt;
      &lt;li&gt;create Fieldsets&lt;/li&gt;
      &lt;li&gt;wrap fields together&lt;/li&gt;
      &lt;li&gt;insert HTML between fields&lt;/li&gt;
  &lt;/ul&gt;
&lt;h2&gt;Create Fieldsets&lt;/h2&gt;
&lt;p&gt;
  In Crispy forms you can define a layout and structure the fields using
  the Fieldset layout object. However this means you have to add every field
  you want in the Fieldset layout object, and this can become a long list:
&lt;/p&gt;&lt;/p&gt;

&lt;pre rel=&#34;Python&#34;&gt;
&lt;code&gt;
Layout(
    Fieldset(
        &#39;Your legend&#39;,
        &#39;first_name&#39;,
        &#39;last_name&#39;,
        &#39;street&#39;,
        &#39;house_number&#39;,
        &#39;addition&#39;,
        &#39;zip_code&#39;,
        &#39;city&#39;
    )
)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
  There is another way to create fieldsets and or manipulate the layout structure.
  You can use the API from the formhelper instance. In the example below we
  use the formhelper API to slice the layout into fieldsets. We wrap the first 2 fields in
  a fieldset and the rest goes in the second fieldset:
&lt;/p&gt;

&lt;pre class=&#34;python&#34;&gt;
&lt;code&gt;
self.helper = FormHelper(form=self)

self.helper[0:2].wrap_together(layout.Fieldset, &#39;Your name&#39;)
self.helper[1:6].wrap_together(layout.Fieldset, &#39;Your Address&#39;)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;As you can see we only need 2 lines of code to create two fieldsets.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;/img/crispy-fieldsets.png&#34; alt=&#34;Example Crispy forms Fieldset&#34;&gt;
  &lt;figcaption&gt;Example Crispy forms Fieldset&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;h2&gt;Wrap fields together&lt;/h2&gt;
&lt;p&gt;
  Let&amp;rsquo;s say you want to display 2 fields on 1 line, for example:
  house number and addition. In this example we create a wrapper div around the
  2 fields and assign an extra class for each field to be able to style the
  two fields the way we want:
&lt;/p&gt;&lt;/p&gt;

&lt;pre rel=&#34;Python&#34;&gt;
&lt;code&gt;
self.helper[3:5].wrap_together(layout.Div, css_class=&#34;housenumber-wrapper&#34;)
self.helper[&#39;house_number&#39;].wrap(layout.Field, wrapper_class=&#34;housenumber&#34;)
self.helper[&#39;addition&#39;].wrap(layout.Field, wrapper_class=&#34;addition&#34;)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
  &lt;img src=&#34;/img/crispy-field-manipulation-code.png&#34; alt=&#34;&#34;&gt;
  &lt;figcaption&gt;Wrapper around 2 fields&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;
Now you can style and manipulate the 2 fields without touching the other fields. However there are three things you need to be aware of:
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    If you want to manipulate the layout of the fields and also want to
    create fieldsets, first do the manipulation.
  &lt;/li&gt;
  &lt;li&gt;
    When you use the API to create a fieldset, it changes the field order structure.
    For example, the fields &#34;first_name&#34; and &#34;last_name&#34; are in the first fieldset. This changes fields order position into:
    &lt;br&gt;
     0: Fieldset &lt;br&gt;
     1: street &lt;br&gt;
     2: house_number &lt;br&gt;
     3: addition &lt;br&gt;
     etc... &lt;br&gt;
     To fetch &#34;addition&#34; you target to 3 instead of 4 (its position in the original field order).
  &lt;/li&gt;
  &lt;li&gt;
    If you want to insert extra content between fields you do this
    &lt;i&gt;after&lt;/i&gt; the fieldsets are created.
  &lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
    &lt;img src=&#34;/img/crispy-field-manipulation.png&#34; alt=&#34;&#34;&gt;
    &lt;figcaption&gt;Example form where the field &#34;Addition&#34; is positioned next to the field &#34;House number&#34;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Insert HTML between fields&lt;/h2&gt;
&lt;p&gt;
  There are cases you want to add extra information between the fields.
  You can do this by using the insert option. In this example we
  add extra information above the &#34;zipcode&#34; field. Note that we look up the
  second layout and the field precedent to &#34;zipcode&#34;. Because in the first
  step we created 2 fieldsets:
&lt;/p&gt;

&lt;pre rel=&#34;Python&#34;&gt;
&lt;code&gt;
self.helper.layout[1].insert(2,layout.HTML(
  &#39;&amp;lt;p&amp;gt;No spaces in the zipcode, please.&amp;lt;/p&amp;gt;&#39;
))
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;figure&gt;
  &lt;img src=&#34;/img/crispy-add-content.png&#34; alt=&#34;&#34;&gt;
  &lt;figcaption&gt;Example form with extra content&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
  The complete code with all the examples in the right order:
&lt;/p&gt;&lt;/p&gt;

&lt;pre rel=&#34;Python&#34;&gt;
&lt;code&gt;
# Wrapping the fields &#34;housenumber and addition&#34;. Assign extra class to the fields
self.helper[3:5].wrap_together(layout.Div, css_class=&#34;housenumber-wrapper&#34;)
self.helper[&#39;house_number&#39;].wrap(layout.Field, wrapper_class=&#34;housenumber&#34;)
self.helper[&#39;addition&#39;].wrap(layout.Field, wrapper_class=&#34;addition&#34;)

# Create 2 field sets
self.helper[0:2].wrap_together(layout.Fieldset, &#39;Your name&#39;)
self.helper[1:6].wrap_together(layout.Fieldset, &#39;Your Address&#39;)

# not insert text above &#34;zipcode&#34;
self.helper.layout[1].insert(2,layout.HTML(
  &#39;&amp;lt;p&amp;gt;No spaces in the zipcode, please.&amp;lt;/p&amp;gt;&#39;
))
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Customize Sublime text editor</title>
      <link>/blog/customize_sublime/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/customize_sublime/</guid>
      <description>&lt;p&gt;Last year at the Fronteers conference in Amsterdam, Addy Osmani used Sublime Text Editor in his presentation.
The editor looked really cool. Right after the conference I installed Sublime and looked around for
packages which would make my life as front end developer easier and make editing more fun. After a
month of playing with Sublime, I decided to leave TextMate (used it since 2005) and use Sublime as
my new main editor.
&lt;p&gt;
In this article I&amp;rsquo;ll give you tips to configure Sublime to your needs, interesting packages,
how to customize a theme and links to useful documentation. Let&amp;rsquo;s get started.
&lt;/p&gt;
&lt;h2&gt;Install Sublime Text Editor and packages&lt;/h2&gt;
&lt;p&gt;The official page of Sublime Text Editor is:
  &lt;a href=&#34;http://www.sublimetext.com&#34;&gt;http://www.sublimetext.com&lt;/a&gt;,
  you can find the downloads for OS X, Windows and Linux on:
  &lt;a href=&#34;http://www.sublimetext.com/2&#34;&gt;http://www.sublimetext.com/2&lt;/a&gt;.
  To make the most out of Sublime, the first package you want to install
  is the &lt;a href=&#34;http://wbond.net/sublime_packages/package_control&#34;&gt;
  Package Control Manager&lt;/a&gt;. With this tool you can easily install
  useful packages. Follow the installation described on:
  &lt;a href=&#34;http://wbond.net/sublime_packages/package_control/installation&#34;&gt;
    &lt;a href=&#34;http://wbond.net/sublime_packages/package_control/installation&#34;&gt;http://wbond.net/sublime_packages/package_control/installation&lt;/a&gt;&lt;/a&gt;.
    The installation is really easy.
&lt;/p&gt;
&lt;p&gt;When the Package Control is installed, you can start installing
  packages you would like to use. Open Sublime and type in the following
  command:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;strong&gt;cmd&lt;/strong&gt;+&lt;strong&gt;Shift&lt;/strong&gt;+&lt;strong&gt;P&lt;/strong&gt;
    to open the Packages directory.&lt;/li&gt;
  &lt;li&gt;Type &amp;ldquo;&lt;strong&gt;install&lt;/strong&gt;&amp;rdquo; and click on the search result:
    &lt;strong&gt;&amp;ldquo;Package Control: Install Package&amp;rdquo;&lt;/strong&gt;.
    In this window you can search for the packages you like to install.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src=&#34;/img/packagemanager.png&#34; alt=&#34;Sublime Package manager interface&#34; /&gt;
  &lt;figcaption&gt;Installing packages&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
  I made a list of packages what makes programming more fun and my life as
  front end developer easier:&lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;strong&gt;Sass&lt;/strong&gt;: syntax highlighting and tab/code completion
    for Sass.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&#34;https://github.com/titoBouzout/SideBarEnhancements&#34;&gt;
      &lt;strong&gt;Sidebar enhancement&lt;/strong&gt;&lt;/a&gt;: With this plugin you can
      do the basics via the sidebar, like new file/folder, edit,
      open/run, reveal, find in selected/parent/project, etc.&lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;&lt;a href=&#34;http://emmet.io&#34;&gt;Emmet&lt;/a&gt;&lt;/strong&gt;: looks like a
    really awesome toolkit to improve your HTML &amp;amp; CSS workflow.
    Check out the &lt;a href=&#34;http://docs.emmet.io/&#34;&gt;documentation&lt;/a&gt;
    to see what it can do for you. I just read their documentation and
    installed it. I don&#39;t have  experience with it yet, but it looks
    really promising.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Less-Build&lt;/strong&gt;: if you work with
    &lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt; I recommend to use this tool.
    It provides two build systems for &#39;.less&#39; files, both minified and
    non-minified. Requires lessc (via node.js) on OSX and Linux.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;
      &lt;a href=&#34;git://github.com/danro/LESS-sublime.git&#34;&gt;LESS&lt;/a&gt;
    &lt;/strong&gt;: syntax highlighting for LESS.&lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;
      &lt;a href=&#34;https://github.com/squ1b3r/Djaneiro&#34;&gt;Djaneiro&lt;/a&gt;
    &lt;/strong&gt;: syntax highlighting and code completion for Django.
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTML5&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTML Snippets&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTML Attributes&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;
      &lt;a href=&#34;https://github.com/SublimeText/SublimeHg&#34;&gt;SublimeHG&lt;/a&gt;
    &lt;/strong&gt;: is a nice tool for
    &lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;. I use it to
    see which files are changed, to write commit messages and pushing
    it to the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don&#39;t work with LESS or Sass than you could use the following
  tools to create css prefixes and to minify your css/js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wbond.net/sublime_packages/prefixr&#34;&gt;Prefixr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bistory/Sublime-Minifier&#34;&gt;Minifier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Sublime customization&lt;/h2&gt;

&lt;p&gt;You can customize Sublime to your needs, like translating tab size to
spaces, font size, line highlight etc. These customizations are stored
in the user settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;strong&gt;&#34;Preferences &amp;gt; Settings-user&#34;&lt;/strong&gt; (on Linux), or
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;&#34;Sublime Text 2 &amp;gt; Preferences &amp;gt; Settings-user&#34;&lt;/strong&gt;
    (on OS X).
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Here&#39;s a list of useful settings. You can check the default_settings for
  the complete list you wish to override.
&lt;/p&gt;

&lt;pre rel=&#34;json&#34;&gt;
&lt;code class=&#34;json&#34;&gt;
{
  &#34;font_size&#34;: &lt;span class=&#34;number&#34;&gt;11,
  &#34;bold_folder_labels&#34;:true,
  &#34;caret_style&#34;: &#34;phase&#34;, // it will fade in and out rather than blink.
  &#34;highlight_line&#34;: true,
  &#34;ignored_packages&#34;:
  [
  &#34;Vintage&#34;
  ]&lt;span class=&#34;string&#34;&gt;,
  &#34;match_tags&#34;: true,
  // scroll_past_end is already set in default settings,
  // but on OS X, this value is overridden in the platform specific settings.
  // That&#39;s why you need to place this line in your user settings.
  &#34;scroll_past_end&#34;: true,
  &#34;translate_tabs_to_spaces&#34;:true,
  &#34;trim_trailing_white_space_on_save&#34;: true
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Sublime Key commands&lt;/h2&gt;

&lt;p&gt;Sublime has a lot of cool and very handy key commands. The ones I use most are (on OS X):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;strong&gt;Opening The Packages directory&lt;/strong&gt;: use the command &lt;strong&gt;cmd&lt;/strong&gt;+&lt;strong&gt;Shift&lt;/strong&gt;+&lt;strong&gt;P&lt;/strong&gt;. All resources for supported programming and markup languages are stored here.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Opening a file:&lt;/strong&gt; &lt;strong&gt;cmd&lt;/strong&gt;+&lt;strong&gt;P&lt;/strong&gt;. Start typing the name of the file and you get a list of matched file names.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Opening a file and search for a string&lt;/strong&gt;: Use the command &lt;strong&gt;cmd&lt;/strong&gt;+&lt;strong&gt;P&lt;/strong&gt; and type [filename]@[string], for example: main@wrapper. It will open the file with the name &lt;em&gt;&#34;main&#34;&lt;/em&gt; with a string &lt;em&gt;&#34;wrapper&#34;&lt;/em&gt; in it. In my case the &lt;em&gt;&#34;.wrapper&#34;&lt;/em&gt; class is in the &lt;em&gt;&#34;main.scss&#34;&lt;/em&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Multiple selection: you will never use &lt;em&gt;&#34;find and replace&#34;&lt;/em&gt; again. To add all occurrences of the current word to the selection, use &lt;strong&gt;Ctrl&lt;/strong&gt;+&lt;strong&gt;cmd&lt;/strong&gt;+&lt;strong&gt;G&lt;/strong&gt; on OS X, or &lt;strong&gt;Alt&lt;/strong&gt;+&lt;strong&gt;F3&lt;/strong&gt; on Windows and Linux.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Split windows&lt;/strong&gt;: you can split your window in multiple edit screens. To do so use the key commands &lt;strong&gt;cmd&lt;/strong&gt;+&lt;strong&gt;alt&lt;/strong&gt;+&lt;strong&gt;2&lt;/strong&gt;, this split the window in 2 panels. It depends on the width of your screen how many split windows are useful to you.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Emmet key commands&lt;/strong&gt;: I tried some key commands shown on the demo site, but some of them didn&#39;t work, like creating a data uri. Most of these key commands are only for the demo. I found a list of working commands on: &lt;a href=&#34;https://github.com/sergeche/emmet-sublime#available-actions&#34;&gt;github&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Complete list of &lt;strong&gt;Sublime commands&lt;/strong&gt;: check out the page on  &lt;a href=&#34;http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_win.html&#34;&gt;http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_win.html&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src=&#34;/img/findfilestring.png&#34; alt=&#34;Find file with class name in Sublime.&#34; /&gt;
  &lt;figcaption&gt;Find file with class name in Sublime.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Open files via the terminal&lt;/h2&gt;
&lt;p&gt;
  I mostly use the terminal to navigate to folders and to open it in sublime. To use an easy command for it I created a symbolic link. In OS X the Application is in &#34;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&#34;. If it is in another directory use that path in step 2. Open your terminal and type in the following commands:
&lt;/p&gt;
&lt;pre rel=&#34;Terminal&#34;&gt;
&lt;code class=&#34;dos&#34;&gt;
$ cd /usr/local/bin
$ ln -s /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl sublime
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That&#39;s it. You can now use the command &lt;em&gt;&#34;sublime&#34;&lt;/em&gt; in your terminal.&lt;/p&gt;
&lt;h2&gt;Find your theme&lt;/h2&gt;
&lt;p&gt;
  Sublime comes with a couple of standard themes. If none of the default themes matches your personal color styles, you can find a lot of other themes on the internet. I use the Github version from &lt;a href=&#34;https://github.com/daylerees/colour-schemes&#34;&gt;Dayle Rees Color Schemes&lt;/a&gt; and made some changes in it. How did I do that?
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I installed &lt;em&gt;&#34;Dayle Rees color schemes&#34;&lt;/em&gt; via Package manager.&lt;/li&gt;
  &lt;li&gt;Then I opened the folder &lt;em&gt;Browse Packages&lt;/em&gt; (via Preferences).&lt;/li&gt;
  &lt;li&gt;Find the theme package and copy the theme file to your user directory in Browser Packages. In my case it was &lt;em&gt;&#34;Github.tmTheme&#34;&lt;/em&gt;. This is an XML file.&lt;/li&gt;
  &lt;li&gt;Rename the copied file.&lt;/li&gt;
  &lt;li&gt;Select your theme via &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Color Scheme&lt;/strong&gt; &amp;gt; &lt;strong&gt;User&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the file in Sublime and play with the colors you want to change. I opened a CSS and HTML File side by side to see the effect of my changes.&lt;/li&gt;
  &lt;li&gt;When you&#39;re done, you can just close the theme file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this article is meaningful for the people who want to start using Sublime. You can evaluate Sublime for free, and when you are enthusiastic about it, a personal license is only $70.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Day 2013 Amsterdam</title>
      <link>/blog/cssday_2013/</link>
      <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/cssday_2013/</guid>
      <description>

&lt;p&gt;Friday 14 june 2013 in Amsterdam I attended the CSSDay conference. Eight experts talked about 8 different CSS modules. The focus was on techniques of these modules we might not know about and the future of CSS. During the conference I learned that CSS is in very active development. It was an incredible, informative and awesome day. An high standard conference I&amp;rsquo;ve ever attended so far. I hope that there will be another one within 1 or 2 years.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Peter Paul Koch was the host of the day. Eric Meyer started the conference with his talk about fonts. Showing us a couple of creative ways to use different font types and browser quirks. Bert Bos, one of the people who invented CSS, talked about the history of CSS and the use of selectors. I didn&amp;rsquo;t know that CSS was intended for simple documents with high quality typography. Stephen Hay gave a great, humouristic presentation about the power of Flexbox. Divya Manian showed us some really awesome demos of using filters and compositing. Tab Atkins talked about variables and conditional rules we hopefully can use in the near future. Daniel glazman gave an in-depth presentation about &lt;a href=&#34;http://w3c.org/tr/css3-mediaqueries&#34;&gt;media-queries&lt;/a&gt; and shared his thoughts about future specifications. Peter Gaston presented in-detail all the properties and values of transitions and browser quirks.And Finally Lea Verou closed the conference with an enlightning demonstration of border radius. She demonstrated the possibilities and behaviors you probably wouldn&amp;rsquo;t think of when using border-radius.&lt;/p&gt;

&lt;p&gt;Below you&amp;rsquo;ll find my notes of the conference. When the videos are available I will add the links in this post.&lt;/p&gt;

&lt;h2 id=&#34;fonts-erik-meyer&#34;&gt;Fonts - Erik Meyer&lt;/h2&gt;

&lt;p&gt;When using @font-face the browser will always download the fonts required, even when the user has that font on its machine. You can avoid this to add src: local(&amp;ldquo;font name&amp;rdquo;) to @font-face. When the user has the font on its local machine it will use that one. Example:&lt;/p&gt;

&lt;pre rel=&#34;CSS&#34;&gt;
&lt;code class=&#34;css&#34;&gt;
@font-face {
  font-family: &#34;Helvetica W01 Bold&#34;;
  src: url(&#34;fonts/f70da45a-a05c-490c-ad62-7db4894b012a.eot?#iefix&#34;);
  src: local(&#34;Helvetica W01 Bold&#34;),
        url(&#34;fonts/f70da45a-a05c-490c-ad62-7db4894b012a.eot?#iefix&#34;) format(&#34;eot&#34;),
  /* etc... */
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Giving the font-family a short name will save a few bites. Although when you use Helvetica don&amp;rsquo;t use the short name H because Microsoft will display it as Arial(?).&lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can also use unicode-range property:&lt;/p&gt;

&lt;pre rel=&#34;CSS&#34;&gt;
&lt;code class=&#34;css&#34;&gt;
@font-face&lt;/span&gt; {
  font-family: STIXGeneral;
  src: local(STIXGeneral), url(/stixfonts/STIXGeneral.otf);
      unicode-range: U+000-49F, U+2000-27FF, U+2900-2BFF, U+1D400-1D7FF;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;css-selectors-bert-bos&#34;&gt;CSS Selectors - Bert Bos&lt;/h2&gt;

&lt;p&gt;The goal of CSS is to style text, applicable to formats that are tree-structured and to be format independent. For example, when HTML dies, it can be used for another format.&lt;/p&gt;

&lt;p&gt;However, the web/world is changing, there is no standard language for GUIs. We use HTML + CSS instead. This changes the focus of CSS from styling high quality typography to complex books, magazines and complex GUIs. Bert mentioned some selectors I didn&amp;rsquo;t know and a few selector proposals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@page, @top are also selectors for pages and running headers.&lt;/li&gt;
&lt;li&gt;form control parts: ::value, ::choices&lt;/li&gt;
&lt;li&gt;proposal: list markers, footnote markers ::marker&lt;/li&gt;
&lt;li&gt;proposal: templates/regions:  ::slot(), ::column(), @region&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good list of selectors with explanation can be found on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3schools.com/cssref/css_selectors.asp&#34;&gt;w3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://net.tutsplus.com/tutorials/html-css-techniques/the-30-css-selectors-you-must-memorize/&#34;&gt;tutsplus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;flexbox-stephen-hay&#34;&gt;Flexbox - Stephen Hay&lt;/h2&gt;

&lt;blockquote&gt;
  One giant leap for web layout.
  &lt;cite&gt;- Stephen Hay&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flexbox has been rewritten multiple times, at the time of writing it has the Candidate Recommendation. Flexbox is for creating interfaces, not really suitable for layouts.
Flexbox has 12 properties. When using flex box, don&amp;rsquo;t think in left to right or top to bottom, because it can go both ways. It has no fixed start or end point.&lt;/p&gt;

&lt;p&gt;For more information about Flexbox, check out the following documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&#34;http://css-tricks.com/old-flexbox-and-new-flexbox/&#34;&gt;Old and new flexbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;http://coding.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/&#34;&gt;Smashing magazine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/css3-flexbox/#overview-example&#34;&gt;w3c.org css3 flexbox&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
## Filter effects &amp;amp; compositing - Divya Manian

SVG filters are introduced by Adobe and work in Chrome and Safari. A filter changes the pixels of an element and creates a new stacking context. &#34;Filter effects are a way of processing an element&#39;s rendering before it is displayed in the document. They are triggered by a style instruction (the ‘filter’ property).&#34; &lt;a href=&#34;https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html&#34;&gt;w3c.org filters&lt;/a&gt;

There are 3 types of filters:
&lt;ul&gt;
  &lt;li&gt;built-in filters: support in Chrome, Safari and Opera 15+&lt;/li&gt;
  &lt;li&gt;svg filters: IE10, Firefox with no prefixes. Chrome, Safari and Opera with prefixes&lt;/li&gt;
  &lt;li&gt;custom filters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in filters are: blur, brightness, contrast, drop-shadow, grayscale, hue-rotate, invert, opacity, saturate and sepia.&lt;/p&gt;

&lt;p&gt;Syntax example:&lt;/p&gt;

&lt;pre rel=&#34;CSS&#34;&gt;
&lt;code class=&#34;css&#34;&gt;
.box { -webkit-filter: drop-shadow(5px 5px 5px rgba(0, 0, 0, 0.5)) sepia(100%); }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The difference between the CSS box-shadow property and filter drop-shadow, is that the drop-shadow() filter operates on the entire element.&lt;/p&gt;

&lt;p&gt;You can experiment with filters and compositing (in Photoshop known as blend modes) on adobe&amp;rsquo;s &lt;a href=&#34;http://html.adobe.com/webplatform/graphics/customfilters/cssfilterlab/&#34;&gt;cssfilterlab&lt;/a&gt;. You do need Safari or Chrome. More information about filters and blend modes can be found on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&#34;http://nimbu.in/cssday/#/step-1&#34;&gt;Divya&#39;s slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html&#34;&gt;W3C.org Filter Effects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;http://adobe.github.io/web-platform/demos/compositing/&#34;&gt;Adobe github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
## Variables &amp;amp; conditionals - Tab Atkins

Variables have been the number one developer request since 1998 but they all failed. With Frameworks like SASS and LESS we can use variables now. The CSS Working Group keeps an eye on what&#39;s happening around them. They do not tend to reinvent the wheel.

The specification is written and maintained by Tab Atkins and is still in working draft. Tab is creating a variable type which will be an addition to the variables in LESS/SASS. His new style is limited, you can use it in properties but not in media queries or selectors. However, he says it is very useful for web component theming. For Example:

&lt;pre rel=&#34;CSS&#34;&gt;
&lt;code class=&#34;css&#34;&gt;
:root { var-main-color: #000; }

.foo { color: var(main-color); }
&lt;/code&gt;
&lt;/pre&gt;

Tab Atkins also showed how to use calculations and a variable like pi.

&lt;pre rel=&#34;CSS&#34;&gt;
&lt;code class=&#34;css&#34;&gt;
:root {
    var-phi: 1.618;
    var-pi: 3.14159;
}

.foo { width: calc(300px * var(phi)); }
&lt;/code&gt;
&lt;/pre&gt;


An example of a conditional rule is @supports. With @supports you can test whether a property is supported or not. It is similar to Modernizr and other similar libraries.

&lt;pre rel=&#34;CSS&#34;&gt;
&lt;code class=&#34;css&#34;&gt;
@supports (display: flex) {
    body, #navigation, #article {
        display: flex;
        width: auto;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

All the features Tab showed us, really made me wanting it implemented tomorrow. You can find his slides on: &lt;a href=&#34;http://www.xanthir.com/talks/2013-06-14&#34;&gt;xanthir.com&lt;/a&gt; (use chrome and your arrow keys to navigate).

## Animations &amp;amp; Transitions - Peter Gaston

2007 Safari6 introduces animations and transitions via CSS. But at the moment it is still buggy. With animation you have to specify every keyframe, otherwise the element will be set to its default setting. You can also transition the selectors ::after and ::before, except in Safari6. Transition on gradients don&#39;t work.

Performance:

&lt;ul&gt;
  &lt;li&gt;Chrome uses graphics acceleration but Safari, especially for iOS, you must force it with this hack: -webkit-transition: rotateY(0deg)&lt;/li&gt;
  &lt;li&gt;CSS is better for performance than using jQuery animations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peter also showed us examples of specs violation, things that were in the specs but not applied in browsers.&lt;/p&gt;

&lt;p&gt;Peter&amp;rsquo;s slides are on &lt;a href=&#34;https://speakerdeck.com/stopsatgreen/animations-and-transitions&#34;&gt;speakerdeck&lt;/a&gt;. You can also check out some nice animation/transition demos on
   &lt;a href=&#34;http://tympanus.net/Development/PseudoElementsAnimationsTransitions/index3.html&#34;&gt;
       tympanus.net
   &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-humble-border-radius-lea-verou&#34;&gt;The humble border radius - Lea verou&lt;/h2&gt;

&lt;p&gt;What you specify is not always what you get. If the border radius doesn&amp;rsquo;t fit, all borders will apply the changes, they reduce proportionally. You cannot combine outline with border-radius, to fake an outline use box-shadow property.&lt;/p&gt;

&lt;h3 id=&#34;border-radius-and-text&#34;&gt;border-radius and text&lt;/h3&gt;

&lt;p&gt;css-shapes future specification: shape-inside: rectangle(0,0,100%, 100%, 50px 50px); With this property the text in the element with border-radius will follow its shape.&lt;/p&gt;

&lt;p&gt;More information about border-radius, border-corner-shape and corners:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&#34;webplatform.org/css/properties/border-radius&#34;&gt;webplatform border radius&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;webplatform.org/css/properties/border-corner-shape&#34;&gt;webplatform border corner shape&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;w3.orgTR/css3-background/#corners&#34;&gt;w3.org corners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The layout of the presentation really made me happy, nice colors and beautiful layout. Amazing how she talks and do live coding at once. I attended her talk last year at Fronteers Conference, that was already awesome and this time she pulled it off again.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&#34;http://github.com/leaverou/csss&#34;&gt;Lea&#39;s presentation framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&#34;http://lea.verou.me/humble-border-radius&#34;&gt;Lea&#39;s presentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>